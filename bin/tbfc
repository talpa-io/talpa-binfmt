#!/usr/bin/php
<?php
/**
 * Created by PhpStorm.
 * User: matthias
 * Date: 07.09.18
 * Time: 12:47
 */

namespace App;

use Phore\Cli\CliController;
use Phore\Log\Logger\PhoreEchoLogger;
use Phore\Log\PhoreLog;
use Talpa\BinFmt\V1\TCLDataReader;
use Talpa\BinFmt\V1\TCLDataWriter;


if (file_exists(__DIR__ . "/../vendor/autoload.php"))
    require __DIR__ . "/../vendor/autoload.php";
else
    require __DIR__ . "/../../../autoload.php";

$group = \Phore\Cli\CliController::GetInstance()->group("tbfc");

$group->command("pack")
    ->withString("input", "the input file")
    ->withBool("stdin", "read from strdin")
    ->withBool("stdout", "Write to stdout")
    ->withBool("indurad5colQuickfix", "Quick fix to fix indurad 5 column format")
    ->withBool("failOnErr", "Fail hard on input error (testing)")
    ->withString("out", "output file")
    ->run(function($input, bool $stdin, bool $stdout, $out, bool $indurad5colQuickfix, bool $failOnErr) {
        if ($stdin) {
            $in = phore_file("php://stdin")->asFile()->fopen("r");
        } else {
            $in = phore_file($input)->assertFile()->fopen("r");
        }
        if ($stdout) {
            $out = phore_file("php://stdout")->fopen("w");
        } else {
            $out = phore_file($out)->fopen("w");
        }
        $writer = new TCLDataWriter($out);
        PhoreLog::Init(new PhoreEchoLogger());
        $minTime = strtotime("2018-01-01 00:00:00");
        $firstTs = null;
        while ( ! $in->feof()) {
            $data = $in->freadcsv(0, "\t");

            if (count($data) === 0)
                continue;

            if ($indurad5colQuickfix) {
                if ( ! is_array($data) || count($data) !== 5 ) {
                    if ($failOnErr)
                        throw new \InvalidArgumentException("Line malformed: " . print_r($data, true));
                    phore_log()->warn("Ignoring line " . print_r ($data, true));
                    continue;
                }
            } else {
                if ( ! is_array($data) || count($data) !== 4 ) {
                    if ($failOnErr)
                        throw new \InvalidArgumentException("Line malformed: " . print_r($data, true));
                    phore_log()->warn("Ignoring line " . print_r ($data, true));
                    continue;
                }
            }



            $timestamp = $data[0];
            if ($timestamp < $minTime) {
                if ($failOnErr)
                    throw new \InvalidArgumentException("Line malformed: " . print_r($data, true));
                phore_log()->warn("Timestamp $timestamp before 2018");
                continue;
            }
            $colName = $data[1];
            $mu = $data[2];
            $value = $data[3];
            if ($indurad5colQuickfix) {
                $mu = $data[3];
                $value = $data[4];
            }

            if ($firstTs === null)
                $firstTs = $timestamp;
            //phore_log("Ts: {$timestamp} ColName: $colName Measure: {$mu} Value: {$value}");
            $writer->inject($timestamp, $colName . ":" . $mu, $value);
        }
        $writer->close();
        $in->fclose();

        phore_log()->info("OK Imported " . date("Y-m-d H:i:s", $firstTs) . " - " . date("Y-m-d H:i:s", @$timestamp) . print_r($writer->getStats(), true));

    });


$group->command("unpack")
    ->withString("input", "the tbf input file")
    ->withBool("stdin", "read from strdin")
    ->withBool("stdout", "Write to stdout")
    ->withString("out", "Output file")
    ->withString("include", "Include coloums", null)
    ->run (function ($input, $out, bool $stdin, bool $stdout, $include=null) {

        if ($stdin) {
            $in = phore_file("php://stdin")->asFile()->fopen("r");
        } else {
            $in = phore_file($input)->assertFile()->fopen("r");
        }
        if ($stdout) {
            $out = phore_file("php://stdout")->fopen("w");
        } else {
            $out = phore_file($out)->fopen("w");
        }


        $incCols = [];
        if ($include !== null)
            $incCols = explode(";", $include);

        $reader = new TCLDataReader();
        $reader->setOnDataCb(function ($ts, $colName, $value, $measure) use ($out) {
            $out->fputcsv([$ts, $colName, $measure, $value], "\t");
        });
        $reader->parse($in, $incCols);
        $out->fclose();
        $in->fclose();
    });

CliController::GetInstance()->dispatch();


